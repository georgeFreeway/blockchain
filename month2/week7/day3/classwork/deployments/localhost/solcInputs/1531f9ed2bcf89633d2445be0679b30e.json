{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/CrowdFund.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./PriceConverter.sol\";\n\nerror CrowdFund__NotOnwer();\nerror CrowdFund__NotEnough();\nerror CrowdFund__WithdrawalFailed();\n\ncontract CrowdFund {\n    using PriceConverter for uint256;\n\n    //state variables\n    uint256 private constant MINIMUM_FEE = 50 * 1e18;\n    address[] private funders;\n    mapping(address => uint256) public amountFundedByAddress;\n    address private immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n    \n    constructor(address _priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n       if(msg.sender != i_owner){\n        revert CrowdFund__NotOnwer();\n       }\n        _;\n    }\n    \n    function fund() public payable {\n        //reverts if the amount is not up to the msg.value\n        if(msg.value.getConversionRate(priceFeed) < MINIMUM_FEE){\n            revert CrowdFund__NotEnough();\n        }\n        //keep track of funders\n        funders.push(msg.sender);\n        amountFundedByAddress[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        //loop through the funders array and then reset a funder balance to zero\n        for(uint256 index = 0; index < funders.length; index++){\n           address funder = funders[index];\n           amountFundedByAddress[funder] = 0;\n        }\n        //an array can be mutated directly in solidity with the new keyword\n        funders = new address[](0);\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        if(!success){\n            revert CrowdFund__WithdrawalFailed();\n        }\n    }\n\n    //getter functions\n    function getFee() public pure returns(uint256) {\n        return MINIMUM_FEE;\n    }\n\n    function getFunders() public view returns(uint256) {\n        return funders.length;\n    }\n\n    function getOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function getContractBalance() public view returns(uint256) {\n        return address(this).balance;\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    //first get the price of usd in eth\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n        return uint256(answer * 1e10);\n    }\n\n    //convert msg.value to dollar price\n    function getConversionRate(uint256 _ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethToUsd = (_ethAmount * ethPrice) / 1e18;\n        return ethToUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}